package edu.berkeley.path.model_objects.validation;

import edu.berkeley.path.model_objects.scenario.*;
import java.util.ArrayList;
import java.util.List;
import core.*;

rule "Project ID of Scenario is not null or 0"
dialect "mvel"
dialect "java"
when
  $scenario : Scenario ( projectId == 0 || projectId == null)
  $result : ValidationResult()
then
  $result.addMessage("Invalid Project ID. Cannot be null or 0.", ValidationMessage.Severity.ERROR);
end

rule "Project ID of Scenario is an existing project in Database"
dialect "mvel"
dialect "java"
when
  $scenario : Scenario ( projectId != 0 && projectId != null)
  $result : ValidationResult()
then
  Long projectId = $scenario.getProjectId();
  java.sql.Connection dbConn = oraDatabase.doConnect();
  // check database for project ID
  String query = "read_projectID" + projectId;

  oraDatabaseReader.psCreate(dbConn,
  query,
  "SELECT * " +
  "FROM VIA.\"PROJECTS\" WHERE (\"ID\" = ?)",
  1
  );

  oraDatabaseReader.psSetParam(query, 1, oraSPEnums.spParamType.INT_VAR, projectId + "");
  oraDatabaseReader.psQuery(query);

  // Add ERROR message to validation if no project with given id exists in DB
  if (!oraDatabaseReader.rsNext(query)) {
    $result.addMessage("Scenario's Project ID DOES NOT exist in Database.", ValidationMessage.Severity.ERROR);
  }
end

rule "Sensor Set Name is not null"
when
  $scenario : Scenario (sensorSet != null)
  $set : SensorSet( name == null || name == "") from $scenario.getSensorSet()
  $result : ValidationResult()
then
  $result.addMessage("Invalid Sensor Set Name. Cannot be null.", ValidationMessage.Severity.ERROR);
end

rule "Demand Set Name is not null"
when
  $scenario : Scenario (demandSet != null)
  $set : DemandSet( name == null || name == "") from $scenario.getDemandSet()
  $result : ValidationResult()
then
  $result.addMessage("Invalid Demand Set Name. Cannot be null.", ValidationMessage.Severity.ERROR);
end

rule "FD Set Name is not null"
when
  $scenario : Scenario (fundamentalDiagramSet != null)
  $set : FundamentalDiagramSet( name == null || name == "") from $scenario.getFundamentalDiagramSet()
  $result : ValidationResult()
then
  $result.addMessage("Invalid Fundamental Diagram Set Name. Cannot be null.", ValidationMessage.Severity.ERROR);
end

rule "Split Ratio Set Name is not null"
when
  $scenario : Scenario (splitRatioSet != null)
  $set : SplitRatioSet( name == null || name == "") from $scenario.getSplitRatioSet()
  $result : ValidationResult()
then
  $result.addMessage("Invalid Split Ratio Set Name. Cannot be null.", ValidationMessage.Severity.ERROR);
end

rule "Actuator Set Name is not null"
when
  $scenario : Scenario (actuatorSet != null)
  $set : ActuatorSet( name == null || name == "") from $scenario.getActuatorSet()
  $result : ValidationResult()
then
  $result.addMessage("Invalid Actuator Set Name. Cannot be null.", ValidationMessage.Severity.ERROR);
end

rule "Controller Set Name is not null"
when
  $scenario : Scenario (controllerSet != null)
  $set : ControllerSet( name == null || name == "") from $scenario.getControllerSet()
  $result : ValidationResult()
then
  $result.addMessage("Invalid Controller Set Name. Cannot be null.", ValidationMessage.Severity.ERROR);
end